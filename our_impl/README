(a) Team Name: Upteam


(b) Members:

    Name:        Predari Maria
    email:       predarimaria@gmail.com
    Institution: University of Patras
    Department:  Computer Engineering and Informatics Department (CEID)
    Degree:      graduate student ( Master's degree)

    Name:        Papapaulou Christos
    email:       chrispapapaulou@gmail.com
    Institution: University of Patras
    Department:  Department of Electrical and Computer Engineering (ECE)
    Degree:      Undergraduate student


(c) No supervisor.


(d) Brief(?) Description:

In our implementation we use a global trie in order to store each unique word that exists through out the lifetime
of our program (either as a query or a document word). We use this structure as a reference, in order not to repeat
some of the following procedures for already existing words.

When the program starts, we process each query in serial mode, as they arrive in StartQuery. Each unique query word
is assigned a global word id.  As documents arrive, they are distributed across threads (one document per thread)
and each thread processes the words so that tey acquire a unique global word id. We use this id to discard any duplicate
appearances of the word in the document by storing it in a local index hash table.

When this phase is completed , only one thread is responsible to gather the unique words of all documents in the current
batch and store them in a global index hash table. In the next phase we assign each thread to a number of words and for
every word we update their matching lists of query words. To do so, we calculate the edit/hamming distance of each document
word with every query word. Moreover, we make sure that we do not repeat calculations of word pairs that we have already
evaluated in previous batches.

In the final phase of our implementation we determine for every document word the minimum edit/hamming distance with which
it is associated with every matching query word. Finally, we iterate over all the active queries that are stored in a vector,
and we check that we have a match with all of the words of this query based on the proper distance.


(e) No 3rd Party Code.
